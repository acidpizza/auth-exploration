version: '3.8'
services:
  traefik:
    image: 'traefik:v2.2'
    command:
    - '--api.insecure=true'
    - '--providers.docker=true'
    - '--providers.docker.exposedbydefault=false'
    - '--entrypoints.web.address=:80'
    - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
    - '--entrypoints.web.http.redirections.entrypoint.scheme=https'
    - '--entrypoints.websecure.address=:443'
    - '--log.level=DEBUG'
    ports:
    - '80:80'
    - '443:443'
    - '8080:8080'
    volumes:
    # So that Traefik can listen to the Docker events
    - '/var/run/docker.sock:/var/run/docker.sock:ro'
    networks:
      default:
        aliases:
        # This allows the other containers to also reach the services through
        # this public address (as opposed to using hostnames)
        - keycloak.localhost
        - httpbin.localhost

  keycloak:
    image: quay.io/keycloak/keycloak:10.0.1
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: keycloak-postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      DB_SCHEMA: public
      KEYCLOAK_IMPORT: /etc/kcconfig/realm-export.json
    volumes:
    - './keycloak/realm-export.json:/etc/kcconfig/realm-export.json:ro'
    - './keycloak/https:/etc/x509/https:ro'
    depends_on:
    - traefik
    - keycloak-postgres
    labels:
    - 'traefik.enable=true'
    - 'traefik.tcp.routers.keycloak.rule=HostSNI(`keycloak.localhost`)'
    - 'traefik.tcp.routers.keycloak.tls.passthrough=true'
    - 'traefik.tcp.routers.keycloak.entrypoints=websecure'
    - 'traefik.tcp.services.keycloak.loadbalancer.server.port=8443'

  keycloak-postgres:
    image: postgres:12
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  kong-migrations:
    image: kong:2.0.4-oidc
    command: kong migrations bootstrap
    depends_on:
    - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    restart: on-failure

  kong-migrations-up:
    image: kong:2.0.4-oidc
    command: kong migrations up && kong migrations finish
    depends_on:
    - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    restart: on-failure

  kong:
    build: ./kong-oidc
    image: kong:2.0.4-oidc
    user: "${KONG_USER:-kong}"
    depends_on:
    - kong-db
    volumes:
    - './kong:/etc/kongconfig/:ro'
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      #KONG_STREAM_LISTEN: '0.0.0.0:5555'
      KONG_CASSANDRA_CONTACT_POINTS: kong-db

      KONG_DATABASE: postgres
      # Use declarative db-less
      #KONG_DATABASE: 'off'
      #KONG_DECLARATIVE_CONFIG: /etc/kongconfig/kong.yml

      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: oidc
    ports:
#    - "8000:8000/tcp"
    - "8001:8001/tcp"
#    - "8443:8443/tcp"
#    - "8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    labels:
    - "traefik.enable=true"
    - 'traefik.tcp.routers.kong.rule=HostSNI(`httpbin.kong.localhost`)'
    - 'traefik.tcp.routers.kong.tls.passthrough=true'
    - 'traefik.tcp.routers.kong.entrypoints=websecure'
    - 'traefik.tcp.services.kong.loadbalancer.server.port=8443'
    #- 'traefik.tcp.services.kong.loadbalancer.server.port=5555'
  kong-db:
    image: postgres:12
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  httpbin:
    image: kennethreitz/httpbin
    command:
    - 'gunicorn'
    - '-b=0.0.0.0:8443'
    - '-k=gevent'
    - '--certfile=/tmp/https/tls.crt'
    - '--keyfile=/tmp/https/tls.key'
    - 'httpbin:app'
    volumes:
    - './httpbin/https:/tmp/https/:ro'
    labels:
#    - 'traefik.enable=true'
    - 'traefik.tcp.routers.httpbin.rule=HostSNI(`httpbin.localhost`)'
    - 'traefik.tcp.routers.httpbin.tls.passthrough=true'
    - 'traefik.tcp.routers.httpbin.entrypoints=websecure'
    - 'traefik.tcp.services.httpbin.loadbalancer.server.port=8443'

